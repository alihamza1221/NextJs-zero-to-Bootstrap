"use strict";(()=>{var e={};e.id=773,e.ids=[773],e.modules={11185:e=>{e.exports=require("mongoose")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},58155:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>g,routeModule:()=>m,serverHooks:()=>v,staticGenerationAsyncStorage:()=>f});var s={};t.r(s),t.d(s,{POST:()=>p});var i=t(49303),a=t(88716),n=t(60670),o=t(93227),c=t(45256),d=t(7410),u=t(72344);let l=d.z.object({code:d.z.string().min(3,{message:"Code must be 3 characters long"})});async function p(e){try{let{username:r,verificationCode:t}=await e.json(),s=l.safeParse({code:t});if(!s.success)throw Error(s.error.toString());await (0,c.Z)();let i=await o.Z.findOne({username:r});if(!i)throw Error("User not found");let a=i.verificationCode===t,n=i.verificationCodeExpiration<new Date;if(a&&!n)return i.isVerified=!0,await i.save(),Response.json({success:!0,message:"User verified"},{status:200});throw Error("Invalid or expired verification code")}catch(e){return console.log(e.message),Response.json({success:!1,message:e.message},{status:400})}}d.z.object({username:u.$,verificationCode:l});let m=new i.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/verifyUser/route",pathname:"/api/verifyUser",filename:"route",bundlePath:"app/api/verifyUser/route"},resolvedPagePath:"C:\\Users\\aliha\\Desktop\\Nextjs\\NextJs-zero-to-Bootstrap\\Next_Bootstrap\\app\\api\\verifyUser\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:g,staticGenerationAsyncStorage:f,serverHooks:v}=m,h="/api/verifyUser/route";function y(){return(0,n.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:f})}},45256:(e,r,t)=>{t.d(r,{Z:()=>n});var s=t(11185),i=t.n(s);let a={};async function n(){if(a.isConnected)return console.log("using existing connection"),!0;try{let e=await i().connect(process.env.MONGODB_URI||"");return a.isConnected=e.connections[0].readyState,console.log("new connection: "+a.isConnected),1==a.isConnected||Error("DB connection failed")}catch(e){return console.log(e),!1}}},93227:(e,r,t)=>{t.d(r,{Z:()=>o});var s=t(11185),i=t.n(s);let a=new s.Schema({content:{type:String,required:[!0,"Pleas add some content!"]},createdAt:{type:Date,required:!0,default:Date.now}}),n=new s.Schema({email:{type:String,required:[!0,"Pleas add some content!"],unique:!0,trim:!0,lowercase:!0,match:[/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/,"Please fill a valid email address"]},username:{type:String,required:!0,trim:!0,minlength:2},password:{type:String,required:[!0,"username can't be empty"],trim:!0,minlength:2},verificationCode:{type:String,required:[!0,"verification code is required"]},verificationCodeExpiration:{type:Date,required:[!0,"verification code expiry is required"]},isVerified:{type:Boolean,default:!1,required:!0},isAcceptingMessages:{type:Boolean,default:!0},messages:[a]}),o=i().models.User||i().model("User",n)},72344:(e,r,t)=>{t.d(r,{$:()=>i});var s=t(7410);let i=s.z.string().min(3,{message:"Username must be at least 3 characters long"}).max(20,{message:"Username must be at most 20 characters long"});s.z.object({username:i,email:s.z.string().email(),password:s.z.string().min(6,{message:"Password must be at least 6 characters long"})})}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[948,691],()=>t(58155));module.exports=s})();