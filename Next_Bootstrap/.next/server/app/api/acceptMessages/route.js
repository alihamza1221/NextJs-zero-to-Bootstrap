"use strict";(()=>{var e={};e.id=946,e.ids=[946],e.modules={11185:e=>{e.exports=require("mongoose")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},80031:(e,s,t)=>{t.r(s),t.d(s,{originalPathname:()=>m,patchFetch:()=>f,requestAsyncStorage:()=>d,routeModule:()=>p,serverHooks:()=>l,staticGenerationAsyncStorage:()=>g});var n={};t.r(n),t.d(n,{POST:()=>u});var a=t(49303),r=t(88716),i=t(60670),o=t(93227),c=t(45256);let u=async e=>{let{username:s,isAcceptingMessages:t}=await e.json();if(console.log("username:->  ",s,"message: -> ",t),!s)return Response.json({success:!1,message:"username is required"},{status:400});try{await (0,c.Z)();let e=await o.Z.findOne({username:s,isVerified:!0});if(!e)return Response.json({success:!1,message:"User Not Found"},{status:404});if(console.log(e),e.isAcceptingMessages===t)return Response.json({success:!0,message:"No Change in Message Acceptance"},{status:200});return console.log("user.acc: -> ",e.isAcceptingMessages,"isAcceptingMessages: -> ",t),e.isAcceptingMessages=t,await e.save(),console.log("after==> ",e.isAcceptingMessages),Response.json({success:!0,message:"Message Acceptance Updated"},{status:200})}catch(e){return Response.json({success:!1,message:e.message},{status:400})}},p=new a.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/acceptMessages/route",pathname:"/api/acceptMessages",filename:"route",bundlePath:"app/api/acceptMessages/route"},resolvedPagePath:"C:\\Users\\aliha\\Desktop\\Nextjs\\NextJs-zero-to-Bootstrap\\Next_Bootstrap\\app\\api\\acceptMessages\\route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:d,staticGenerationAsyncStorage:g,serverHooks:l}=p,m="/api/acceptMessages/route";function f(){return(0,i.patchFetch)({serverHooks:l,staticGenerationAsyncStorage:g})}},45256:(e,s,t)=>{t.d(s,{Z:()=>i});var n=t(11185),a=t.n(n);let r={};async function i(){if(r.isConnected)return console.log("using existing connection"),!0;try{let e=await a().connect(process.env.MONGODB_URI||"");return r.isConnected=e.connections[0].readyState,console.log("new connection: "+r.isConnected),1==r.isConnected||Error("DB connection failed")}catch(e){return console.log(e),!1}}},93227:(e,s,t)=>{t.d(s,{Z:()=>o});var n=t(11185),a=t.n(n);let r=new n.Schema({content:{type:String,required:[!0,"Pleas add some content!"]},createdAt:{type:Date,required:!0,default:Date.now}}),i=new n.Schema({email:{type:String,required:[!0,"Pleas add some content!"],unique:!0,trim:!0,lowercase:!0,match:[/^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/,"Please fill a valid email address"]},username:{type:String,required:!0,trim:!0,minlength:2},password:{type:String,required:[!0,"username can't be empty"],trim:!0,minlength:2},verificationCode:{type:String,required:[!0,"verification code is required"]},verificationCodeExpiration:{type:Date,required:[!0,"verification code expiry is required"]},isVerified:{type:Boolean,default:!1,required:!0},isAcceptingMessages:{type:Boolean,default:!0},messages:[r]}),o=a().models.User||a().model("User",i)},49303:(e,s,t)=>{e.exports=t(30517)}};var s=require("../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),n=s.X(0,[948],()=>t(80031));module.exports=n})();